#!/usr/bin/env python3
"""
Servidor Flask para integrar transcripci√≥n de audio con eustakio_interface
"""

from flask import Flask, request, jsonify, send_from_directory
from flask_cors import CORS
import os
import json
import requests
from werkzeug.utils import secure_filename
import tempfile

app = Flask(__name__)
CORS(app)  # Permitir peticiones desde el frontend

# Configuraci√≥n
CONFIG_FILE = 'config.json'
UPLOAD_FOLDER = 'uploads'
ALLOWED_EXTENSIONS = {'mp3', 'wav', 'm4a', 'flac', 'ogg', 'aac'}

# Crear carpeta de uploads si no existe
os.makedirs(UPLOAD_FOLDER, exist_ok=True)

def allowed_file(filename):
    """Verificar si el archivo tiene una extensi√≥n permitida"""
    return '.' in filename and \
           filename.rsplit('.', 1)[1].lower() in ALLOWED_EXTENSIONS

def cargar_configuracion():
    """Cargar configuraci√≥n desde archivo"""
    try:
        if os.path.exists(CONFIG_FILE):
            with open(CONFIG_FILE, 'r') as f:
                return json.load(f)
    except Exception as e:
        print(f"Error al cargar configuraci√≥n: {e}")
    return {}

def guardar_configuracion(config):
    """Guardar configuraci√≥n en archivo"""
    try:
        with open(CONFIG_FILE, 'w') as f:
            json.dump(config, f)
        return True
    except Exception as e:
        print(f"Error al guardar configuraci√≥n: {e}")
        return False

@app.route('/')
def index():
    """Servir la p√°gina principal"""
    return send_from_directory('.', 'index.html')

@app.route('/<path:filename>')
def serve_file(filename):
    """Servir archivos est√°ticos"""
    return send_from_directory('.', filename)

@app.route('/api/config', methods=['GET'])
def get_config():
    """Obtener configuraci√≥n"""
    config = cargar_configuracion()
    return jsonify(config)

@app.route('/api/config', methods=['POST'])
def save_config():
    """Guardar configuraci√≥n"""
    try:
        data = request.get_json()
        if 'api_key' in data:
            config = cargar_configuracion()
            config['api_key'] = data['api_key']
            if guardar_configuracion(config):
                return jsonify({'success': True, 'message': 'Configuraci√≥n guardada'})
            else:
                return jsonify({'error': 'Error al guardar configuraci√≥n'}), 500
        else:
            return jsonify({'error': 'API key requerida'}), 400
    except Exception as e:
        return jsonify({'error': str(e)}), 500

@app.route('/api/transcribir', methods=['POST'])
def transcribir_audio():
    """Transcribir archivo de audio usando Whisper API"""
    print("üîç Petici√≥n de transcripci√≥n recibida")
    
    try:
        # Verificar si hay archivo
        if 'file' not in request.files:
            print("‚ùå No se encontr√≥ archivo en la petici√≥n")
            return jsonify({'error': 'No se proporcion√≥ archivo'}), 400
        
        archivo = request.files['file']
        print(f"üìÅ Archivo recibido: {archivo.filename}")
        
        if archivo.filename == '':
            print("‚ùå Nombre de archivo vac√≠o")
            return jsonify({'error': 'No se seleccion√≥ archivo'}), 400
        
        if not allowed_file(archivo.filename):
            print(f"‚ùå Tipo de archivo no permitido: {archivo.filename}")
            return jsonify({'error': 'Tipo de archivo no permitido'}), 400
        
        # Obtener API key
        api_key = request.form.get('api_key')
        if not api_key:
            config = cargar_configuracion()
            api_key = config.get('api_key')
        
        if not api_key:
            print("‚ùå API key no encontrada")
            return jsonify({'error': 'API key no configurada'}), 400
        
        print("‚úÖ API key encontrada")
        
        # Guardar archivo temporalmente
        filename = secure_filename(archivo.filename)
        temp_path = os.path.join(UPLOAD_FOLDER, filename)
        archivo.save(temp_path)
        print(f"üíæ Archivo guardado temporalmente: {temp_path}")
        
        # Verificar tama√±o del archivo
        tamano_archivo = os.path.getsize(temp_path) / (1024 * 1024)  # MB
        print(f"üìè Tama√±o del archivo: {tamano_archivo:.2f}MB")
        
        if tamano_archivo > 25:
            os.remove(temp_path)  # Limpiar archivo
            print("‚ùå Archivo demasiado grande")
            return jsonify({'error': 'El archivo es demasiado grande. El l√≠mite es 25MB'}), 400
        
        print("üöÄ Enviando archivo a Whisper API...")
        
        # Preparar archivo para env√≠o a Whisper API
        with open(temp_path, 'rb') as audio_file:
            files = {'file': audio_file}
            data = {
                'model': 'whisper-1',
                'language': 'es',  # Espa√±ol para audio cl√≠nico
                'response_format': 'json'
            }
            headers = {
                'Authorization': f'Bearer {api_key}'
            }
            
            # Realizar petici√≥n a la API de Whisper
            response = requests.post(
                'https://api.openai.com/v1/audio/transcriptions',
                headers=headers,
                data=data,
                files=files
            )
        
        print(f"üì° Respuesta de Whisper API: {response.status_code}")
        
        # Limpiar archivo temporal
        os.remove(temp_path)
        print("üßπ Archivo temporal eliminado")
        
        if response.status_code == 200:
            resultado = response.json()
            transcripcion = resultado.get('text', '')
            print(f"‚úÖ Transcripci√≥n exitosa: {len(transcripcion)} caracteres")
            return jsonify({
                'success': True,
                'transcripcion': transcripcion,
                'archivo': filename
            })
        else:
            error_msg = f"Error en la API: {response.status_code} - {response.text}"
            print(f"‚ùå Error de Whisper API: {error_msg}")
            return jsonify({'error': error_msg}), 500
            
    except Exception as e:
        print(f"‚ùå Error general: {str(e)}")
        # Limpiar archivo temporal en caso de error
        if 'temp_path' in locals() and os.path.exists(temp_path):
            os.remove(temp_path)
            print("üßπ Archivo temporal eliminado por error")
        return jsonify({'error': str(e)}), 500

@app.route('/api/health', methods=['GET'])
def health_check():
    """Verificar estado del servidor"""
    return jsonify({'status': 'ok', 'message': 'Servidor funcionando correctamente'})

@app.route('/api/completar-plantilla', methods=['POST'])
def completar_plantilla():
    """Completar plantilla usando OpenAI"""
    print("üîç Petici√≥n de completaci√≥n de plantilla recibida")
    
    try:
        data = request.get_json()
        prompt = data.get('prompt')
        
        if not prompt:
            print("‚ùå No se proporcion√≥ prompt")
            return jsonify({'error': 'Prompt requerido'}), 400
        
        print(f"üìù Prompt recibido: {len(prompt)} caracteres")
        
        # Obtener API key
        config = cargar_configuracion()
        api_key = config.get('api_key')
        
        if not api_key:
            print("‚ùå API key no encontrada")
            return jsonify({'error': 'API key no configurada'}), 400
        
        print("üöÄ Enviando prompt a OpenAI...")
        
        # Realizar petici√≥n a OpenAI
        headers = {
            'Authorization': f'Bearer {api_key}',
            'Content-Type': 'application/json'
        }
        
        payload = {
            'model': 'gpt-3.5-turbo',
            'messages': [
                {
                    'role': 'system',
                    'content': 'Eres un asistente m√©dico especializado en completar plantillas m√©dicas. Debes respetar el formato de la plantilla y llenar solo los campos que puedas con la informaci√≥n proporcionada. Si no hay informaci√≥n para un campo, d√©jalo en blanco o con [No especificado].'
                },
                {
                    'role': 'user',
                    'content': prompt
                }
            ],
            'max_tokens': 2000,
            'temperature': 0.3
        }
        
        response = requests.post(
            'https://api.openai.com/v1/chat/completions',
            headers=headers,
            json=payload
        )
        
        print(f"üì° Respuesta de OpenAI: {response.status_code}")
        
        if response.status_code == 200:
            resultado = response.json()
            contenido = resultado['choices'][0]['message']['content']
            print(f"‚úÖ Plantilla completada: {len(contenido)} caracteres")
            return jsonify({
                'success': True,
                'result': contenido
            })
        else:
            error_msg = f"Error en OpenAI: {response.status_code} - {response.text}"
            print(f"‚ùå Error de OpenAI: {error_msg}")
            return jsonify({'error': error_msg}), 500
            
    except Exception as e:
        print(f"‚ùå Error general: {str(e)}")
        return jsonify({'error': str(e)}), 500

if __name__ == '__main__':
    print("üöÄ Iniciando servidor de transcripci√≥n para eustakio_interface...")
    print("üìÅ Serviendo archivos desde:", os.getcwd())
    print("üåê Servidor disponible en: http://localhost:3001")
    print("üìù API endpoints:")
    print("   - GET  /api/config     - Obtener configuraci√≥n")
    print("   - POST /api/config     - Guardar configuraci√≥n")
    print("   - POST /api/transcribir - Transcribir audio")
    print("   - GET  /api/health     - Verificar estado")
    print("   - POST /api/completar-plantilla - Completar plantilla")
    
    app.run(host='0.0.0.0', port=3001, debug=True) 